{
  "name": "gulp-jslint",
  "version": "0.2.2",
  "description": "The classic and strict javascript lint-tool for gulp.js",
  "main": "gulp.jslint.js",
  "dependencies": {
    "colors": "1.0.3",
    "event-stream": "~3.2.1",
    "gulp-util": "~3.0.2",
    "jslint": "0.7.1"
  },
  "devDependencies": {
    "codeclimate-test-reporter": "0.0.4",
    "colortape": "0.0.4",
    "gulp": "^3.8.10",
    "istanbul": "^0.3.5",
    "rimraf": "2.2.8",
    "stripcolorcodes": "0.1.0",
    "tape": "^3.0.3",
    "vinyl": "^0.4.6"
  },
  "scripts": {
    "pretest": "gulp",
    "test": "npm run coverage && npm run codeclimate && npm run rm",
    "coverage": "istanbul cover test/test-gulp.jslint.js --report lcovonly",
    "codeclimate": "cat coverage/lcov.info | codeclimate",
    "rm": "rimraf coverage"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/karimsa/gulp-jslint.git"
  },
  "keywords": [
    "gulp",
    "gulpplugin",
    "jslint",
    "lint",
    "code quality"
  ],
  "author": {
    "name": "Karim Alibhai"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/karimsa/gulp-jslint/issues"
  },
  "readme": "# gulp-jslint [![Build Status](http://img.shields.io/travis/karimsa/gulp-jslint.svg?style=flat)](https://travis-ci.org/karimsa/gulp-jslint) [![View on NPM](http://img.shields.io/npm/dm/gulp-jslint.svg?style=flat)](http://npmjs.org/package/gulp-jslint) [![code climate](http://img.shields.io/codeclimate/github/karimsa/gulp-jslint.svg?style=flat)](https://codeclimate.com/github/karimsa/gulp-jslint) [![code coverage](http://img.shields.io/codeclimate/coverage/github/karimsa/gulp-jslint.svg?style=flat)](https://codeclimate.com/github/karimsa/gulp-jslint)\nIt's JSLint for Gulp.js.\n\n[![NPM](https://nodei.co/npm/gulp-jslint.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/gulp-jslint/)\n\n## Usage\n\nTo install with npm, simply do:\n\n```\n$ npm install gulp-jslint\n.. installs gulp-jslint ..\n```\n\nSample gulpfile.js:\n\n```javascript\nvar gulp = require('gulp');\nvar jslint = require('gulp-jslint');\n\n// build the main source into the min file\ngulp.task('default', function () {\n    return gulp.src(['source.js'])\n\n        // pass your directives\n        // as an object\n        .pipe(jslint({\n            // these directives can\n            // be found in the official\n            // JSLint documentation.\n            node: true,\n            evil: true,\n            nomen: true,\n\n            // you can also set global\n            // declarations for all source\n            // files like so:\n            global: [],\n            predef: [],\n            // both ways will achieve the\n            // same result; predef will be\n            // given priority because it is\n            // promoted by JSLint\n\n            // pass in your prefered\n            // reporter like so:\n            reporter: 'default',\n            // ^ there's no need to tell gulp-jslint\n            // to use the default reporter. If there is\n            // no reporter specified, gulp-jslint will use\n            // its own.\n\n            // specifiy custom jslint edition\n            // by default, the latest edition will\n            // be used\n            edition: '2014-07-08',\n\n            // specify whether or not\n            // to show 'PASS' messages\n            // for built-in reporter\n            errorsOnly: false\n        }))\n\n        // error handling:\n        // to handle on error, simply\n        // bind yourself to the error event\n        // of the stream, and use the only\n        // argument as the error object\n        // (error instanceof Error)\n        .on('error', function (error) {\n            console.error(String(error));\n        });\n});\n```\n\nWhen not specified, the default reporter will write a pass/fail message to the console with every file.  If you only wish to see errors, set the `errorsOnly` property to `true`.  *Note:* The `errorsOnly` property only affects the default reporter.\n\nFor a list of directives, see [the official JSLint docs](http://www.jslint.com/lint.html).\n\n### Custom Reporters\nA custom reporter is simply a function that receives a JSON object with 2 properties:\n- `pass`: a boolean (true/false) of whether the lint was successful.\n- `file`: an absolute path to the file.\n\nSample Gruntfile with a custom reporter:\n```javascript\nvar gulp = require('gulp');\nvar jslint = require('gulp-jslint');\n\ngulp.task('default', function () {\n    return gulp.src(['my_source.js'])\n            .pipe(jslint({\n                reporter: function (evt) {\n                    var msg = ' ' + evt.file;\n                    \n                    if (evt.pass) {\n                        msg = '[PASS]' + msg;\n                    } else {\n                        msg = '[FAIL]' + msg;\n                    }\n                    \n                    console.log(msg);\n                }\n            }));\n});\n```\n\nIt's probably a good idea to use something like `path.basename()` on the `file` property to avoid lots of garbage in the command-line (i.e. path.basename('/home/user/documents/projects/my-project/index.js') === 'index.js').\n\n## Custom Install\nTo build from source, simply do the following:\n\n```\n$ git clone https://github.com/karimsa/gulp-jslint.git\n.. clones gulp-jslint ..\n$ cd gulp-jslint\n$ npm install\n.. installs dependencies ..\n$ npm test\n.. lints and tests gulp-jslint code ..\n```\n\n## Support\nPlease use the official issues section in GitHub to post issues.\nAll forks and helpful comments are much appreciated.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/karimsa/gulp-jslint",
  "_id": "gulp-jslint@0.2.2",
  "dist": {
    "shasum": "d84619d7b7be954d74abb95a4d13b9a987328d5e"
  },
  "_from": "gulp-jslint@~0.2.2",
  "_resolved": "http://registry.npmjs.org/gulp-jslint/-/gulp-jslint-0.2.2.tgz"
}
